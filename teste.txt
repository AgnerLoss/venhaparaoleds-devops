============================= test session starts ==============================
platform linux -- Python 3.12.3, pytest-8.3.4, pluggy-1.5.0
rootdir: /home/agner/Documentos/projetos/leds/venhaparaoleds-devops
plugins: cov-6.0.0
collected 18 items

tests/test_app.py .....F.                                                [ 38%]
tests/test_candidato.py ..FF...                                          [ 77%]
tests/test_concurso.py ....                                              [100%]

=================================== FAILURES ===================================
__________________________ test_release_db_connection __________________________

mock_db = <MagicMock name='get_db_connection' id='124877462920976'>

    def test_release_db_connection(mock_db):
        """Testa se a conexão é liberada corretamente."""
        conn = mock_db.return_value
        from src.app import release_db_connection
        release_db_connection(conn)
>       conn.putconn.assert_called_once()  # Garante que foi liberada corretamente

tests/test_app.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='get_db_connection().putconn' id='124877462993280'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'putconn' to have been called once. Called 0 times.

/usr/lib/python3.12/unittest/mock.py:923: AssertionError
______________________________ test_candidato_api ______________________________

client = <FlaskClient <Flask 'src.app'>>
mock_db = <MagicMock name='get_db_connection' id='124877467982144'>

    def test_candidato_api(client, mock_db):
        """Testa se a API de candidatos retorna código HTTP 200."""
        response = client.get("/candidatos")
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <WrapperTestResponse streamed [500 INTERNAL SERVER ERROR]>.status_code

tests/test_candidato.py:45: AssertionError
________________________ test_buscar_concursos_por_cpf _________________________

client = <FlaskClient <Flask 'src.app'>>
mock_db = <MagicMock name='get_db_connection' id='124877467813888'>

    def test_buscar_concursos_por_cpf(client, mock_db):
        """Testa se a busca por concursos retorna corretamente."""
        response = client.get("/buscar_concursos/18284508434")
        assert response.status_code == 200
>       assert response.json == [{"orgao": "SEDU", "codigo": "61828450843", "edital": "9/2016"}]
E       AssertionError: assert [{'codigo': '...'João Silva'}] == [{'codigo': '...gao': 'SEDU'}]
E         
E         At index 0 diff: {'codigo': '1990-01-01', 'edital': '12345678900', 'orgao': 'João Silva'} != {'orgao': 'SEDU', 'codigo': '61828450843', 'edital': '9/2016'}
E         Use -v to get more diff

tests/test_candidato.py:52: AssertionError

---------- coverage: platform linux, python 3.12.3-final-0 -----------
Name               Stmts   Miss  Cover   Missing
------------------------------------------------
src/app.py           121     28    77%   24, 40, 72-73, 83, 87, 93, 110-111, 119, 145, 163-164, 170-198, 204
src/candidato.py      22      1    95%   35
src/concurso.py       15      0   100%
------------------------------------------------
TOTAL                158     29    82%

=========================== short test summary info ============================
FAILED tests/test_app.py::test_release_db_connection - AssertionError: Expect...
FAILED tests/test_candidato.py::test_candidato_api - assert 500 == 200
FAILED tests/test_candidato.py::test_buscar_concursos_por_cpf - AssertionErro...
========================= 3 failed, 15 passed in 0.51s =========================
